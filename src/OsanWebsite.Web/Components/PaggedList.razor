@typeparam TItem

<div class="pagged-list">
    @if (Loading)
    {
        @LoadingTemplate
    }
    else if (!Loading && Items.Count() == 0)
    {
        @EmptyTemplate
    }
    else
    {
        @if (HeaderTemplate != null)
        {
            @HeaderTemplate
        }

        @foreach (var item in Items)
        {
            @ItemTemplate(item)
        }

        @if (FooterTemplate != null)
        {
            @FooterTemplate
        }
    }
</div>

<div class="pagged-footer">
    @if ((!Loading && Items.Count() == 0) || PageCount == 0)
    {
        <span></span>
    }
    else
    {
        <button class="btn btn-primary btn-sm" @onclick=fetchPrevious
                disabled="@(!hasPrevious() || Loading)">
            <span class="fa fa-arrow-left"></span>
        </button>

        <div class="footer-label">@CurrentPage / @PageCount</div>

        <button class="btn btn-primary btn-sm" @onclick=fetchNext
                disabled="@(!hasNext() || Loading)">
            <span class="fa fa-arrow-right"></span>
        </button>
    }
</div>

@code {
    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = default!;

    [Parameter]
    public int PageSize { get; set; }

    [Parameter]
    public int PageCount { get; set; }

    [Parameter]
    public int Total { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public bool Loading { get; set; }

    [Parameter]
    public RenderFragment? HeaderTemplate { get; set; } = default!;

    [Parameter]
    public RenderFragment? FooterTemplate { get; set; } = default!;

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; } = default!;

    [Parameter]
    public RenderFragment LoadingTemplate { get; set; } = default!;

    [Parameter]
    public RenderFragment EmptyTemplate { get; set; } = default!;

    [Parameter]
    public bool AsTable { get; set; } = false;

    [Parameter]
    public Func<int, int, Task> OnFetch { get; set; } = default!;


    private bool hasNext() => CurrentPage < PageCount;
    private bool hasPrevious() => CurrentPage > 1;

    private async void fetchPrevious()
    {
        if (hasPrevious())
        {
            await OnFetch(CurrentPage - 1, PageSize);
        }
    }

    private async void fetchNext()
    {
        if (hasNext())
        {
            await OnFetch(CurrentPage + 1, PageSize);
        }
    }
}
